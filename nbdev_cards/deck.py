# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_deck.ipynb.

# %% auto 0
__all__ = ['Deck', 'draw_n']

# %% ../nbs/01_deck.ipynb 2
from fastcore.foundation import patch
from .card import *
import random

# %% ../nbs/01_deck.ipynb 5
class Deck:
    """
        A deck of cards
        
        self.cards is a list of the cards available in the deck
        initially, the deck contains all cards
    """
    def __init__(self):        
        self.cards = [Card(s, r) for s in range(4) for r in range(1, 14)]
        
    def __len__(self): return len(self.cards)

    def __contains__(self, card): return card in self.cards
        
    def __str__(self): return '; '.join(map(str, self.cards))

    def __repr__(self): return self.__str__()

# %% ../nbs/01_deck.ipynb 14
@patch
def pop(self:Deck,
       idx:int=-1): # The index of the card to remove, defaulting to the last one
    "Remove one card from the deck"
    return self.cards.pop(idx)

# %% ../nbs/01_deck.ipynb 18
@patch
def remove(self:Deck,
           card:Card): # card to remove
    "remove `Card` from deck or raises exception if it is not there"
    self.cards.remove(card)

# %% ../nbs/01_deck.ipynb 20
@patch
def shuffle(self:Deck):
    "Shuffles the deck of cards"
    random.shuffle(self.cards)

# %% ../nbs/01_deck.ipynb 23
def draw_n(n:int, # number of cards to draw
           replace:bool=True): # whether or not drae with replacement
    "Draw `n` cards, with replacement iif `replace`"
    d = Deck()
    d.shuffle()
    if replace:
        return [d.cards[random.choice(range(len(d.cards)))] for _ in range(n)]
    else: return d.cards[:n]
