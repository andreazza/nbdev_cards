[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "A deck of cards demo of nbdev."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards",
    "section": "Install",
    "text": "Install\nInstall using:\npip install nbdev_cards"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nThis lib helps use cards:\n\nCard(1,3)\n\n3♦\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♣', '♦', '♥', '♠']"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card",
    "section": "",
    "text": "ranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nsource"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card",
    "section": "Comparison operators",
    "text": "Comparison operators\nEquality, less than, and greater than work on the rank and suit indices:\nFor instance, here’s a test of equality…\n\ntest_ne(Card(suit=1, rank=2), \n        Card(suit=1, rank=3))\n\n…and a test of > …\n\nassert not Card(suit=1, rank=3)>Card(suit=1, rank=3)\n\n…and a teste of < …\n\nassert Card(suit=0, rank=3)<Card(suit=1, rank=3)"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of cards\nself.cards is a list of the cards available in the deck initially, the deck contains all cards\nWhen we initially create a deck, all of the cards will be present:\n\ndeck = Deck()\ndeck\n\nA♣; 2♣; 3♣; 4♣; 5♣; 6♣; 7♣; 8♣; 9♣; 10♣; J♣; Q♣; K♣; A♦; 2♦; 3♦; 4♦; 5♦; 6♦; 7♦; 8♦; 9♦; 10♦; J♦; Q♦; K♦; A♥; 2♥; 3♥; 4♥; 5♥; 6♥; 7♥; 8♥; 9♥; 10♥; J♥; Q♥; K♥; A♠; 2♠; 3♠; 4♠; 5♠; 6♠; 7♠; 8♠; 9♠; 10♠; J♠; Q♠; K♠\n\n\nThat should be 52 cards.\n\ntest_eq(len(deck), 52)\n\nReminding that these are the suits defined in Card:\n\nsuits\n\n['♣', '♦', '♥', '♠']\n\n\nHow to check if a card is in the deck:\n\nCard(1, 1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3, 13))\n\nThere are 51 cards left in the decl now:\n\ntest_eq(len(deck), 51)\n\n\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nremove Card from deck or raises exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\ncard to remove\n\n\n\n\ncard23 = Card(2, 3)\ndeck.remove(card23)\n\nassert card23 not in deck\n\n\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nShuffles the deck of cards\nYou can shuffle a deck of cards like this:\n\ndeck = Deck()\ndeck.shuffle()\ndeck\n\n7♣; 8♣; Q♦; 3♥; Q♥; 8♦; 7♠; 9♣; 8♠; J♠; 10♦; 3♦; 4♠; 2♠; J♦; 6♠; 9♠; 9♦; J♣; K♦; 3♣; 7♥; J♥; 10♣; A♦; 5♠; 2♦; 10♥; 4♥; K♠; A♠; A♣; 5♥; K♣; 9♥; 2♣; 3♠; Q♠; 8♥; 6♣; 4♦; 10♠; 6♥; 2♥; 5♣; A♥; K♥; 6♦; Q♣; 5♦; 4♣; 7♦\n\n\n\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement iif replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not drae with replacement\n\n\n\n\ndraw_n(13, replace=False)\n\n[A♥, 9♠, J♥, Q♣, 10♠, 8♥, 7♦, 8♠, 10♦, A♣, K♠, 2♦, A♦]"
  }
]